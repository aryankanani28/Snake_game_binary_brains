#include <iostream>
#include <conio.h>
#include <windows.h>
#include <ctime>
#include <algorithm>

using namespace std;

const int WIDTH = 20;
const int HEIGHT = 20;
const int MAX_LENGTH = WIDTH * HEIGHT;

class Point {
public:
    int x, y;
    Point(int x = 0, int y = 0) : x(x), y(y) {}

    bool operator==(const Point& p) const {
        return x == p.x && y == p.y;
    }
};

class SnakeGame {
private:
    enum Direction { STOP = 0, LEFT, RIGHT, UP, DOWN };
    Direction dir;
    bool gameOver;
    int score;
    int highScore;
    Point food;
    Point snake[MAX_LENGTH];
    int length;
    char board[HEIGHT][WIDTH];

    void Setup() {
        gameOver = false;
        dir = STOP;
        length = 3;

        int startX = WIDTH / 2;
        int startY = HEIGHT / 2;

        snake[0] = Point(startX, startY);
        snake[1] = Point(startX - 1, startY);
        snake[2] = Point(startX - 2, startY);

        score = 0;
        GenerateFood();
    }

    void DrawBoard() {
        system("cls");

        for (int i = 0; i < HEIGHT; ++i) {
            for (int j = 0; j < WIDTH; ++j) {
                if (i == 0 || i == HEIGHT - 1 || j == 0 || j == WIDTH - 1)
                    board[i][j] = '#';
                else
                    board[i][j] = ' ';
            }
        }

        for (int i = 0; i < length; i++)
            board[snake[i].y][snake[i].x] = 'O';

        board[snake[0].y][snake[0].x] = '@';
        board[food.y][food.x] = 'F';

        for (int i = 0; i < HEIGHT; ++i) {
            for (int j = 0; j < WIDTH; ++j)
                cout << board[i][j];
            cout << endl;
        }
        cout << "Score: " << score << " | High Score: " << highScore << endl;
    }

    void Input() {
        if (_kbhit()) {
            switch (_getch()) {
            case 'a': if (dir != RIGHT) dir = LEFT; break;
            case 'd': if (dir != LEFT) dir = RIGHT; break;
            case 'w': if (dir != DOWN) dir = UP; break;
            case 's': if (dir != UP) dir = DOWN; break;
            case 'x': gameOver = true; break;
            }
        }
    }

    void Logic() {
        Point newHead = snake[0];
        switch (dir) {
            case LEFT: newHead.x--; break;
            case RIGHT: newHead.x++; break;
            case UP: newHead.y--; break;
            case DOWN: newHead.y++; break;
            default: return;
        }

        
        if (newHead.x < 1 || newHead.x >= WIDTH - 1 || newHead.y < 1 || newHead.y >= HEIGHT - 1)
            gameOver = true;

        
        for (int i = 1; i < length; i++) {
            if (snake[i] == newHead)
                gameOver = true;
        }

        
        for (int i = length; i > 0; i--) {
            snake[i] = snake[i - 1];
        }
        snake[0] = newHead;

        
        if (newHead == food) {
            score++;
            length++;
            GenerateFood();
        }

        highScore = max(highScore, score);
    }

    void GenerateFood() {
        do {
            food.x = rand() % (WIDTH - 2) + 1;
            food.y = rand() % (HEIGHT - 2) + 1;
        } while (isOnSnake(food));
    }

    bool isOnSnake(const Point& p) {
        for (int i = 0; i < length; i++) {
            if (snake[i] == p)
                return true;
        }
        return false;
    }

public:
    SnakeGame() : highScore(0) {
        srand(static_cast<unsigned>(time(0)));
    }

    void Run() {
        while (true) {
            Setup();
            while (!gameOver) {
                DrawBoard();
                Input();
                Logic();
                Sleep(100);
            }
            cout << "Game Over! Your score: " << score << endl;
            cout << "Press 'r' to restart or 'q' to quit." << endl;
            char choice;
            do {
                choice = _getch();
            } while (choice != 'r' && choice != 'q');
            if (choice == 'q') break;
        }
    }
};

int main() {
    SnakeGame game;
    game.Run();
    return 0;
}
